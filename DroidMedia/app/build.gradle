plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.22'
}



//def SUPPORTED_ABI = ['arm64-v8a', 'x86', 'x86_64','armeabi-v7a'] as String[]
//def ABI_RAW = []
//ABI_RAW.addAll(ABI_FILTERS.split(',').collect{it as String})
//SUPPORTED_ABI= ABI_RAW.toArray(String[]::new)

//def SUPPORTED_ABI = rootProject.SUPPORTED_ABI as String[]
//project.logger.lifecycle "SUPPORTED_ABI length is ${SUPPORTED_ABI.size()}"
def SUPPORTED_ABI = ['arm64-v8a', 'x86', 'x86_64','armeabi-v7a'] as String[]


android {
    compileSdk =  34
    buildToolsVersion = '34.0.0'

    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(17))
    }

    namespace "com.me.harris.droidmedia"
    ndkVersion project.properties['NDK_VERSION']


    buildFeatures {
        buildConfig = true
        viewBinding = true
//        aidl true
    }

    sourceSets {
//        main {
//            jniLibs.srcDirs = ['src/main/jniLibs']
//        }  、、 External native build now automatically packages those libraries, so explicitly packaging the library with jniLibs results in a duplicate.
//        To avoid the build error, move the prebuilt library to a location outside jniLibs or remove the jniLibs configuration from your build.gradle file.
    }

    defaultConfig {
        applicationId "com.me.harris.droidmedia"
        minSdk = Integer.parseInt(libs.versions.minSdk.get())
        targetSdk = Integer.parseInt(libs.versions.targetSdk.get())
        //noinspection ExpiredTargetSdkVersion
        versionCode 100
        versionName "1.0.0"

        resourceConfigurations += ['zh', 'zh-rCN']


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        if(SUPPORT_NATIVE_BUILD){
//            externalNativeBuild {
//                cmake {
//                    abiFilters SUPPORTED_ABI //只帮我打这个架构的就好了
//                    cppFlags "-g -std=c++11 -frtti -fexceptions"
//                    arguments '-DANDROID_PLATFORM=android-21',
//                            '-DANDROID_TOOLCHAIN=clang',
//                            '-DANDROID_CPP_FEATURES=rtti exceptions'
////                arguments  "-DANDROID_STL=stlport_static"
//                    "-DANDROID_ARM_NEON=true"
//                }
//            }
//            ndk {
//                abiFilters  SUPPORTED_ABI
//            }
//
//            splits {
//                abi {
//                    enable true
//                    reset()
//                    include  SUPPORTED_ABI
//                    universalApk true
//                }
//            }
//
//            packagingOptions {
//                pickFirst "lib/arm64-v8a/*.so"
//            }
//        }

    }


    //DSL element 'dexOptions' is obsolete and should be removed.
    //It will be removed in version 8.0 of the Android Gradle plugin.
//    dexOptions {
//        jumboMode = true
//        javaMaxHeapSize "4g"
//        keepRuntimeAnnotatedClasses false
//        // 优化transformClassDexBuilderForDebug
//        maxProcessCount 12
//        threadCount =  12
//        // https://blog.csdn.net/weixin_45583158/article/details/121368947
//    }

//    if (SUPPORT_NATIVE_BUILD){
//        externalNativeBuild {
//            cmake {
//                version "3.22.1"
//                path "src/main/cpp/CMakeLists.txt"
//            }
//        }
//    }
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
//            vendor = JvmVendorSpec.ORACLE
            implementation = JvmImplementation.VENDOR_SPECIFIC
        }
    }

    packagingOptions {
        pickFirst '**/libEGL.so'
        pickFirst '**/libGLESv2.so'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    lint {
        abortOnError false
        checkReleaseBuilds true
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
        pickFirst 'lib/*/liblog.so'
    }






    //https://stackoverflow.com/a/40276710 每次换机器编译都要重新安装太费事了
    signingConfigs {
        release {
            keyAlias 'key79'
            keyPassword 'report989'
            storePassword 'report989'
            storeFile file("${rootDir}/keystores/release2.keystore")
        }

        debug {
            storeFile file("${rootDir}/keystores/debug.keystore")
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            ndk.abiFilters 'arm64-v8a'
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    android.applicationVariants.configureEach { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
//            output.metaPropertyValues.forEach { a ->
//                project.logger.lifecycle("${a.name} = ${a.value}")
//            }
            output.properties.forEach { a , b  ->
                project.logger.lifecycle("[map]${a} = ${b}")
            }
            output.outputFileName = "DroidMedia"+"_" + variant.versionName + "_" + "arm64v8a" + ".apk"
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 + android.defaultConfig.versionCode
        }
    }




}

dependencies {
    implementation libs.androidx.core.core.ktx
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.cardview.cardview
    implementation libs.coroutines.core
    implementation libs.coroutines.android

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.kotlin.stdlib.java8
    implementation libs.androidx.appcompat.appcompat
    implementation libs.google.android.material.material
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.lifecycle.livedata.ktx
    implementation libs.exoplayer.core
    implementation libs.exoplayer.ui
    implementation libs.coil.kt
    implementation  libs.androidx.recyclerview.recyclerview


    testImplementation libs.junit.junit
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.espresso.espresso.core
    // App compat and UI things


    implementation libs.androidx.viewpager2.viewpager2

    implementation libs.androidx.constraintlayout
    implementation libs.androidx.coordinatelayout
    // EXIF Interface
    implementation libs.androidx.exfi.interface

    // Glide
    implementation libs.glide
//    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    // okhttp
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp-bom
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.10.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    implementation libs.retrofit
    implementation libs.converter.gson

//    implementation group: 'com.jadynai.ai.kotlind', name: 'KotlinD', version: '1.0.5'
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxandroid
    implementation libs.rxandroid
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxjava
    implementation libs.rxjava
    // https://mvnrepository.com/artifact/com.squareup.retrofit2/adapter-rxjava3
    implementation libs.adapter.rxjava3

    implementation libs.kotlinx.serialization.json




//    implementation files('somelibs/jetified-exoplayer-core-r2.5.2.aar')
//    implementation files('somelibs/jetified-exoplayer-ui-r2.5.2.aar')
//    implementation project(":awesomelib")
    implementation projects.awesomelib
    implementation projects.medialibs.filterLibrary
    implementation projects.medialibs.jpegturbo
    implementation projects.medialibs.audiolib
    implementation projects.medialibs.pnglib
    implementation projects.medialibs.avif
    implementation projects.mango.simdjson
//    implementation project(":medialibs:filterLibrary")
    implementation project(":medialibs:playerLib")
    implementation project(":medialibs:epf")
    implementation project(":medialibs:mediakit")
    implementation project(":medialibs:cameraLib")
    implementation project(":medialibs:ijksource")
    implementation project(":medialibs:yuv")
    implementation project(":medialibs:extractframe")
    implementation project(":medialibs:gpuv")
    implementation project(":medialibs:mediainfo")
    implementation project(":serviceloaderapi:serviceapi")
    implementation project(":mango:nativecrash")


    implementation libs.google.dagger.hilt.android
    kapt libs.google.dagger.hilt.android.compiler



}
