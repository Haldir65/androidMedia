plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    alias(libs.plugins.compose.compiler)
    alias(libs.plugins.kotlin.serialization)
    id("io.gitlab.arturbosch.detekt").version(libs.versions.detekt)
}



//def SUPPORTED_ABI = ['arm64-v8a', 'x86', 'x86_64','armeabi-v7a'] as String[]
//def ABI_RAW = []
//ABI_RAW.addAll(ABI_FILTERS.split(',').collect{it as String})
//SUPPORTED_ABI= ABI_RAW.toArray(String[]::new)

//def SUPPORTED_ABI = rootProject.SUPPORTED_ABI as String[]
//project.logger.lifecycle "SUPPORTED_ABI length is ${SUPPORTED_ABI.size()}"
def SUPPORTED_ABI = ['arm64-v8a', 'x86', 'x86_64','armeabi-v7a'] as String[]


android {
    compileSdk =  Integer.parseInt(libs.versions.compileSdk.get())
    buildToolsVersion = libs.versions.buildToolsVersion.get().toString()

    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(21))
    }

    namespace "com.me.harris.droidmedia"
    ndkVersion '28.0.13004108'


    buildFeatures {
        buildConfig = true
        viewBinding = true
        compose = true
//        aidl true
    }


//    composeOptions {
//        kotlinCompilerExtensionVersion = "1.5.11"
//    }



    sourceSets {
//        main {
//            jniLibs.srcDirs = ['src/main/jniLibs']
//        }  、、 External native build now automatically packages those libraries, so explicitly packaging the library with jniLibs results in a duplicate.
//        To avoid the build error, move the prebuilt library to a location outside jniLibs or remove the jniLibs configuration from your build.gradle file.
    }

    defaultConfig {
        applicationId "com.me.harris.droidmedia"
        minSdk = Integer.parseInt(libs.versions.minSdk.get())
        targetSdk = Integer.parseInt(libs.versions.targetSdk.get())
        //noinspection ExpiredTargetSdkVersion
        versionCode 100
        versionName "1.0.1"

        resourceConfigurations += ['zh', 'zh-rCN']


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        if(SUPPORT_NATIVE_BUILD){
//            externalNativeBuild {
//                cmake {
//                    abiFilters SUPPORTED_ABI //只帮我打这个架构的就好了
//                    cppFlags "-g -std=c++11 -frtti -fexceptions"
//                    arguments '-DANDROID_PLATFORM=android-21',
//                            '-DANDROID_TOOLCHAIN=clang',
//                            '-DANDROID_CPP_FEATURES=rtti exceptions'
////                arguments  "-DANDROID_STL=stlport_static"
//                    "-DANDROID_ARM_NEON=true"
//                }
//            }
//            ndk {
//                abiFilters  SUPPORTED_ABI
//            }
//
//            splits {
//                abi {
//                    enable true
//                    reset()
//                    include  SUPPORTED_ABI
//                    universalApk true
//                }
//            }
//
//            packagingOptions {
//                pickFirst "lib/arm64-v8a/*.so"
//            }
//        }

    }


    //DSL element 'dexOptions' is obsolete and should be removed.
    //It will be removed in version 8.0 of the Android Gradle plugin.
//    dexOptions {
//        jumboMode = true
//        javaMaxHeapSize "4g"
//        keepRuntimeAnnotatedClasses false
//        // 优化transformClassDexBuilderForDebug
//        maxProcessCount 12
//        threadCount =  12
//        // https://blog.csdn.net/weixin_45583158/article/details/121368947
//    }

//    if (SUPPORT_NATIVE_BUILD){
//        externalNativeBuild {
//            cmake {
//                version "3.30.3"
//                path "src/main/cpp/CMakeLists.txt"
//            }
//        }
//    }
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
//            vendor = JvmVendorSpec.ORACLE
            implementation = JvmImplementation.VENDOR_SPECIFIC
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    kotlinOptions {
//        jvmTarget = JavaVersion.VERSION_21
    }

    lint {
        abortOnError false
        checkReleaseBuilds true
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
        resources.excludes.add("/META-INF/{AL2.0,LGPL2.1}")
        pickFirst 'lib/*/liblog.so'
        pickFirst '**/libEGL.so'
        pickFirst '**/libGLESv2.so'
    }

    //https://stackoverflow.com/a/40276710 每次换机器编译都要重新安装太费事了
    signingConfigs {
        release {
            keyAlias 'key79'
            keyPassword 'report989'
            storePassword 'report989'
            storeFile file("${rootDir}/keystores/release2.keystore")
        }

        debug {
            storeFile file("${rootDir}/keystores/debug.keystore")
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            ndk.abiFilters 'arm64-v8a'
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    android.applicationVariants.configureEach { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
//            output.metaPropertyValues.forEach { a ->
//                project.logger.lifecycle("${a.name} = ${a.value}")
//            }
            output.properties.forEach { a , b  ->
                project.logger.lifecycle("[map]${a} = ${b}")
            }
            output.outputFileName = "DroidMedia"+"_" + variant.versionName + "_" + "arm64v8a" + ".apk"
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 + android.defaultConfig.versionCode
        }
    }




}

dependencies {
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.activity:activity-ktx:1.9.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.9.0'
    implementation libs.androidx.core.core.ktx
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.cardview.cardview
    implementation libs.coroutines.core
    implementation libs.coroutines.android

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.kotlin.stdlib.java8
    implementation libs.androidx.appcompat.appcompat
    implementation libs.google.android.material.material
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.lifecycle.livedata.ktx
    implementation libs.exoplayer.core
    implementation libs.exoplayer.ui
    implementation libs.coil.kt
    implementation  libs.androidx.recyclerview.recyclerview
    implementation libs.androidx.material3.android


    testImplementation libs.junit.junit
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.espresso.espresso.core
    // App compat and UI things


    implementation libs.androidx.viewpager2.viewpager2

    implementation libs.androidx.constraintlayout
    implementation libs.androidx.coordinatelayout
    // EXIF Interface
    implementation libs.androidx.exfi.interface

    // Glide
    implementation libs.glide
//    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    // okhttp
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp-bom
    implementation(platform(libs.okhttp.bom))
    implementation(libs.okhttp)
    implementation(libs.okhttp.logging.interceptor)


    implementation libs.retrofit
    implementation libs.converter.gson

//    implementation group: 'com.jadynai.ai.kotlind', name: 'KotlinD', version: '1.0.5'
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxandroid
    implementation libs.rxandroid
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxjava
    implementation libs.rxjava
    // https://mvnrepository.com/artifact/com.squareup.retrofit2/adapter-rxjava3
    implementation libs.adapter.rxjava3

    implementation libs.kotlinx.serialization.json




//    implementation files('somelibs/jetified-exoplayer-core-r2.5.2.aar')
//    implementation files('somelibs/jetified-exoplayer-ui-r2.5.2.aar')
//    implementation project(":awesomelib")
    implementation projects.awesomelib
    implementation projects.medialibs.filterLibrary
    implementation projects.medialibs.jpegturbo
    implementation projects.medialibs.audiolib
    implementation projects.medialibs.pnglib
    implementation projects.medialibs.avif
    implementation projects.mango.simdjson
//    implementation project(":medialibs:filterLibrary")
    implementation project(":medialibs:playerLib")
    implementation project(":medialibs:epf")
    implementation project(":medialibs:mediakit")
    implementation project(":medialibs:cameraLib")
    implementation project(":medialibs:ijksource")
    implementation project(":medialibs:yuv")
    implementation project(":medialibs:extractframe")
    implementation project(":medialibs:gpuv")
    implementation project(":medialibs:mediainfo")
    implementation project(":medialibs:composeworkmanager")
    implementation project(":medialibs:renderscript-toolkit")
    implementation project(":serviceloaderapi:serviceapi")
    implementation project(":mango:nativecrash")


    implementation libs.google.dagger.hilt.android
    kapt libs.google.dagger.hilt.android.compiler


    implementation(platform(libs.androidx.compose.bom))
    implementation libs.androidx.compiler
    implementation("androidx.activity:activity-compose")
    implementation("androidx.compose.animation:animation")
    implementation("androidx.compose.animation:animation-android")
    implementation("androidx.compose.animation:animation-core")
    implementation("androidx.compose.animation:animation-core-android")
    implementation("androidx.compose.animation:animation-graphics")
    implementation("androidx.compose.animation:animation-graphics-android")
    implementation("androidx.compose.foundation:foundation")
    implementation("androidx.compose.material:material")
    implementation("androidx.compose.material:material-android")
    implementation("androidx.compose.material:material-ripple")
    implementation("androidx.compose.material:material-icons-core")
    implementation("androidx.compose.material:material-icons-extended")
    implementation("androidx.compose.runtime:runtime")
    implementation("androidx.compose.runtime:runtime-livedata")
    implementation("androidx.compose.runtime:runtime-saveable")
    implementation("androidx.compose.foundation:foundation-layout")
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-android")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-unit")
    implementation("androidx.compose.ui:ui-geometry")
    implementation("androidx.compose.ui:ui-text")
    implementation("androidx.compose.ui:ui-tooling")
    implementation("androidx.compose.ui:ui-tooling-preview")



}


detekt {
    // Version of detekt that will be used. When unspecified the latest detekt
    // version found will be used. Override to stay on the same version.
//    toolVersion = "${libs.versions.detekt}"

    // The directories where detekt looks for source files.
    // Defaults to `files("src/main/java", "src/test/java", "src/main/kotlin", "src/test/kotlin")`.
    source.setFrom("src/main/java", "src/main/kotlin")


    // Builds the AST in parallel. Rules are always executed in parallel.
    // Can lead to speedups in larger projects. `false` by default.
    parallel = false

    // Define the detekt configuration(s) you want to use.
    // Defaults to the default detekt configuration.
    config.setFrom("${project.rootDir}/config/detekt/detekt.yml")

    // Applies the config files on top of detekt's default config file. `false` by default.
    buildUponDefaultConfig = false

    // Turns on all the rules. `false` by default.
    allRules = false

    // Specifying a baseline file. All findings stored in this file in subsequent runs of detekt.
    baseline = file("${project.rootDir}/config/detekt/baseline-debug.xml")

    // Disables all default detekt rulesets and will only run detekt with custom rules
    // defined in plugins passed in with `detektPlugins` configuration. `false` by default.
    disableDefaultRuleSets = false

    // Adds debug output during task execution. `false` by default.
    debug = false

    // If set to `true` the build does not fail when the
    // maxIssues count was reached. Defaults to `false`.
    ignoreFailures = true

    // Android: Don't create tasks for the specified build types (e.g. "release")
    ignoredBuildTypes = ["release"]

    // Android: Don't create tasks for the specified build flavor (e.g. "production")
    ignoredFlavors = ["production"]

    // Android: Don't create tasks for the specified build variants (e.g. "productionRelease")
    ignoredVariants = ["productionRelease"]

    // Specify the base path for file paths in the formatted reports.
    // If not set, all file paths reported will be absolute file path.
    basePath = projectDir.absolutePath
}



