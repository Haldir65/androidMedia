plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}


def SUPPORTED_ABI = ['arm64-v8a', 'x86', 'x86_64','armeabi-v7a'] as String[]
def enableCmake = "True".equalsIgnoreCase(property('SUPPORT_NATIVE_BUILD'))

android {
    namespace 'com.jadyn.mediakit'
    compileSdkVersion = project.properties['COMPILE_SKD_VERSION'].toInteger()
    buildToolsVersion = project.properties['BUILD_TOOLS_VERSION']
    ndkVersion project.properties['NDK_VERSION']

    buildFeatures {
        buildConfig = true
        viewBinding = true
//        aidl true
    }

    defaultConfig {
        minSdk = Integer.parseInt(libs.versions.minSdk.get())
        targetSdk = Integer.parseInt(libs.versions.targetSdk.get())

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        if(enableCmake){
            externalNativeBuild {
                cmake {
                    version =  project.properties['CMAKE_VERSION']
                    abiFilters SUPPORTED_ABI //只帮我打这个架构的就好了
                    cppFlags "-g -std=c++17 -frtti -fexceptions"
                    arguments '-DANDROID_PLATFORM=android-21',
                            '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON',
                            '-DANDROID_STL=c++_shared'
                            '-DANDROID_CPP_FEATURES=rtti exceptions'
//                arguments  "-DANDROID_STL=stlport_static"
                    "-DANDROID_ARM_NEON=true"
                }
            }
            ndk {
                abiFilters  SUPPORTED_ABI
            }

            splits {
                abi {
                    enable true
                    reset()
                    include  SUPPORTED_ABI
                    universalApk true
                }
            }

//        packagingOptions {
//            pickFirst "lib/arm64-v8a/*.so"
//        }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_21
    }


    lint {
        abortOnError false
        checkReleaseBuilds true
    }


    if (enableCmake){
        externalNativeBuild {
            cmake {
                version project.properties['CMAKE_VERSION']
                path "src/main/cpp/CMakeLists.txt"
            }
        }
    }

}

dependencies {

    implementation libs.androidx.activity.ktx
    implementation libs.androidx.core.core.ktx
    implementation libs.androidx.appcompat.appcompat
    implementation libs.google.android.material.material
    implementation libs.androidx.cardview.cardview

    implementation libs.coroutines.core
    implementation libs.coroutines.android
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.lifecycle.livedata.ktx

    testImplementation libs.junit.junit
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.espresso.espresso.core


    implementation project(":awesomelib")

    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxjava
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'


    // we want to access application context in library module
    implementation libs.google.dagger.hilt.android
    kapt libs.google.dagger.hilt.android.compiler

}
