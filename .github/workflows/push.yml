name: Android Build upon push

on:
  push:
    # branches:
    #   - master


jobs:
  prerequisiteJob:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is running on a ${{ runner.os }} server hosted by GitHub!"
      - name: Checkout the code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned."
      - run: echo "Setting up JDK"
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17    
          distribution: 'oracle'
          cache: gradle
      - run: echo "The workflow is now ready to test your code."
      - name: clone required dependencies , glm and jpeg-turbo
        working-directory: DroidMedia
        run: |
          chmod +x ./.buildscripts/ensure_third_party_deps.sh
          ./.buildscripts/ensure_third_party_deps.sh
        shell: bash
      - name: show all files
        working-directory: DroidMedia
        run: ls -al
      - name: Grant execute permission for gradlew
        working-directory: DroidMedia
        run: chmod +x gradlew


  buildDebug:
    name: BuildDebug
    if: "!contains(github.event.head_commit.message, 'Release')"
    runs-on: ubuntu-latest
    needs: prerequisiteJob
    steps:
        - run: echo "Building Debug APK."
        - name: Build with Gradle
          working-directory: DroidMedia
          # run: ./gradlew build
          run: ./gradlew assembleDebug
        - run: echo "Build status report=${{ job.status }}."


  buildRelease:
    name: BuildRelease
    if: "contains(github.event.head_commit.message, 'Release')"
    runs-on: ubuntu-latest
    needs: prerequisiteJob
    steps:
      - run: echo "Building Release APK."
      - name: show all files step1
        # working-directory: DroidMedia
        run: ls -al
        ## cache Gradle dependencies and wrapper to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          # working-directory: DroidMedia
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: show all files step2
        # working-directory: DroidMedia
        run: ls -al
      - name: Cache Gradle All Kinds of Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          working-directory: DroidMedia
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: show all files step3
        # working-directory: DroidMedia
        run: ls -al        
      - name: Build with_So_Much_Gradle
        working-directory: DroidMedia
        run: ./gradlew assembleRelease
      - run: echo "Build status report=${{ job.status }}."  
      - name: Upload_That_APK
        uses: actions/upload-artifact@v3
        with:
          name: myapk
          retention-days: 7
          path: ${{ github.workspace }}/DroidMedia/app/build/outputs/apk/release/*.apk      
      - name: Release_This_Maintained
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            DroidMedia/app/build/outputs/apk/release/DroidMedia_1.0.1_arm64v8a.apk
            README.MD
      # - name: Create_Github_Release 
      #   id: create_new_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ github.run_number }}
      #     release_name: Release ${{ github.run_number }}
      #     body: |
      #       Changes in this Release
      #       - First Change
      #       - Second Change
      #       - Third Change
      #     draft: false
      #     prerelease: false
      # - name: Upload APK to release assets
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     upload_url: ${{ steps.create_new_release.outputs.upload_url }}
      #     asset_path: DroidMedia/app/build/outputs/apk/release/DroidMedia_1.0.0_arm64v8a.apk
      #     asset_name: DroidMedia_1.0.0_arm64v8a.apk
      #     asset_content_type: application/zip

