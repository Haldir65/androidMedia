name: Android Build on major os

on:
  workflow_dispatch:
  push:
    branches:
      - test_muiltiple_matrix

jobs:
  BuildWithVariants:
    continue-on-error: false
    strategy:
      matrix:
          target:
            - id: 'linux-amd64'
              os: 'ubuntu-latest'
            - id: 'darwin-aarch64'
              os: 'macos-14'
            - id: 'windows-amd64'
              os: 'windows-2022'
          buildType:
              ["release","debug"]   
    
    runs-on: ${{ matrix.target.os }}
    env:
      builddir: DroidMedia/app/build/outputs/apk/${{ matrix.buildType }}

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is running on a ${{ runner.os }} server hosted by GitHub!"
      - name: Checkout the code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned."

      - name: Install `ninja llvm cmake `  on macOS
        if: startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          brew install ninja tree 
      - name: Install `ninja` on Ubuntu
        if: startsWith(matrix.target.id, 'linux-')
        shell: bash
        run: |
          sudo apt install ninja-build tree build-essential coreutils -y
          echo "cpu core num is "
          nproc

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17    
          distribution: 'oracle'
          cache: gradle    
          
      - run: echo "The workflow is now ready to test your code."
      - name: clone required dependencies , glm and jpeg-turbo
        working-directory: DroidMedia
        run: |
          chmod +x ./.buildscripts/ensure_third_party_deps.sh
          ./.buildscripts/ensure_third_party_deps.sh
        shell: bash

      #cache Gradle dependencies and wrapper to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          # working-directory: DroidMedia
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle All Kinds of Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-  

      - name: show all files
        if: startsWith(matrix.target.id, 'darwin-') || startsWith(matrix.target.id, 'ubuntu-')
        working-directory: DroidMedia
        run: |
          ls -al
          tree
        shell: bash

      - name: Grant execute permission for gradlew
        working-directory: DroidMedia
        run: chmod +x gradlew
        shell: bash

      - run: echo "Building APK"
      - name: Build with Gradle
        working-directory: DroidMedia
        run: |
          if [[ "${{ matrix.buildType }}" == 'release' ]]; then
            ./gradlew assembleRelease
          elif [[ "${{ matrix.buildType }}" == 'debug'  ]]; then
            ./gradlew assembleDebug
          else
            echo "unsupportted target: ${{ matrix.buildType }} "
            echo "${{ matrix.buildType }}"
          fi
        shell: bash
          
      - run: echo "Build status report=${{ job.status }}."

      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.os }}-${{ matrix.buildType }}-apk
          path: |
            ${{ env.builddir }}/*.apk  
          if-no-files-found: error
          retention-days: 7

   
