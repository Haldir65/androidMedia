name: build docker image convenient for android ci 
on:
    workflow_dispatch:
    # push:
    #     branches:
    #         - docker_image_publish

env:
  REGISTRY_IMAGE: haldir65/android-build-env
  DH_UNAME: haldir65
  IMAG_TAG: ubuntu24-sudo-test


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        ## https://github.com/dockcross/dockcross/blob/master/.github/workflows/main.yml
        platform:
          - {
            os_arch: "linux/amd64",
            arch : "amd64",
            java_version: 21,
            sdk_tools_version: "11076708_latest"
          }
          - {
            os_arch: "linux/arm64",
            arch: "arm64",
            java_version: 21,
            sdk_tools_version: "11076708_latest"
          }
    steps:
      -
        name: Prepare
        run: |
          platform=${{ matrix.platform.os_arch }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV          
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Set up QEMU
        if:   matrix.platform.os_arch == 'linux/arm64'
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DH_UNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: androidBuild.Dockerfile
          push: false
          platforms: ${{ matrix.platform.os_arch }}
          build-args:  |
            BUILDPLATFORM=${{ matrix.platform.os_arch }}
            ARCH=${{ matrix.platform.arch }}
            JAVA_VERSION=${{ matrix.platform.java_version }}
            SDK_TOOLS=${{ matrix.platform.sdk_tools_version }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"          
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DH_UNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          echo $DOCKER_METADATA_OUTPUT_JSON
          echo $DOCKER_METADATA_OUTPUT_JSON | jq -cr '.tags | map("-t " + .) | join(" ")'
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *) \
          --tag ${{ env.REGISTRY_IMAGE }}:${{ env.IMAG_TAG }} --tag ${{ env.REGISTRY_IMAGE }}:latest
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}    